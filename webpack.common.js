// default webpack config file
const webpack = require("webpack");
const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const CopyPlugin = require("copy-webpack-plugin");
const BundleAnalyzerPlugin = require("webpack-bundle-analyzer")
  .BundleAnalyzerPlugin;
const StylelintPlugin = require("stylelint-webpack-plugin");
// prod módban ez automatikusan be van kapcsolva
// const TerserPlugin = require('terser-webpack-plugin');
// dev módban style-loader elég ez helyett
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

const config = {
  // entrypoint file
  entry: "./src/index.js",
  output: {
    // with contenthash webpack only generates new files is it has changes - and only for that file
    // if just js changed then dont create new css file on build
    path: path.resolve(__dirname, "dist"),
    filename: "[name].[contenthash].js",
    library: {
      type: "umd",
      name: "MyTestLibrary",
    },
  },
  // @see https://github.com/webpack/webpack-dev-server/issues/2758
  target: process.env.NODE_ENV === "development" ? "web" : "browserslist",
  // target: "web",
  resolve: {
    extensions: [".js", ".scss"],
  },
  module: {
    rules: [
      // handle js files
      {
        test: /\.js$/,
        include: path.resolve(__dirname, "./src"),
        enforce: "pre",
        loader: "eslint-loader",
        options: {
          emitWarning: true,
        },
      },
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: ["babel-loader"],
      },
      // handle css & sass & scss
      {
        test: /\.s?[ac]ss$/,
        use: [
          // 4. injects link tags with css files generated by MiniCssExtractPlugin
          MiniCssExtractPlugin.loader,
          // 4. injects css returned by css-loader into style tags
          // 'style-loader',
          // 3. reads the content of the css files and returns it
          "css-loader",
          // 2. vendor prefixes, etc..
          "postcss-loader",
          // 1. convert scss to css
          "sass-loader",
        ],
      },
      {
        test: /\.svg$/,
        use: "file-loader",
      },
      // handle images
      {
        test: /\.(png|jpe?g)$/,
        use: ["file-loader"],
      },
    ],
  },
  optimization: {
    runtimeChunk: "single",
    splitChunks: {
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: "vendors",
          chunks: "all",
        },
      },
    },
  },
  plugins: [
    // creates an index.html and automatically inserts bundled assets
    new HtmlWebpackPlugin({
      // generated file name in dist folder
      filename: "index.html",
    }),

    new MiniCssExtractPlugin(),

    // clear dist folder before build
    new CleanWebpackPlugin({
      cleanOnceBeforeBuildPatterns: [
        // kitöröl mindent az output mappából a build előtt
        "**/*",
      ],
    }),

    // new StylelintPlugin({
    //   files: path.join('src', '**/*.s?(a|c)ss'),
    // }),
    //
    new BundleAnalyzerPlugin({
      analyzerMode: "static",
      openAnalyzer: false,
    }),
  ],
};

module.exports = config;
