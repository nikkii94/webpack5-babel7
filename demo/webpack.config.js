// default webpack config file
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
// prod módban ez automatikusan be van kapcsolva
// const TerserPlugin = require('terser-webpack-plugin');
// dev módban style-loader elég ez helyett
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

const config = {
  // entrypoint file
  entry: {
    main: './src/index.js'
  },
  output: {
    // with contenthash webpack only generates new files is it has changes - and only for that file
    // if just js changed then dont create new css file on build
    filename: "[name].[contenthash].js",
    path: path.resolve(__dirname) + '/dist',
    // ezt fogja az asset fájlok nevéhez fűzni
    // publicPath: "http://my-domain.com/"
  },
  mode: 'production',
  module: {
    rules: [
      // handle js files
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: [
          'babel-loader'
        ]
      },
      // handle css
      {
        test: /\.css$/,
        // reverse order, from bottom to top
        use: [
          // 2. inject link tag with css file
          MiniCssExtractPlugin.loader,
          // 2. injects css returned by css-loader into style tags
          // 'style-loader',
          // 1. reads the content of the css files and returns it
          'css-loader'
        ]
      },
      // handle sass & scss
      {
        test: /\.s[ac]ss$/,
        use: [
          // 3. injects link tags with css files generated by MiniCssExtractPlugin
          MiniCssExtractPlugin.loader,
          // 3. injects css returned by css-loader into style tags
          // 'style-loader',
          // 2. reads the content of the css files and returns it
          'css-loader',
          // 1. convert scss to css
          'sass-loader'
        ]
      },
      // handle images
      {
        test: /\.(png|jpe?g)$/,
        use: [
          'file-loader'
        ]
      },
     
    ]
  },
  plugins: [
    // creates an index.html and automatically inserts bundled assets
    new HtmlWebpackPlugin({
      // generated file name in dist folder
      filename: 'index.html',
      meta: {
        description: "Custom description"
      }
    }),
  
    // clear dist folder before build
    new CleanWebpackPlugin({
      // cleanOnceBeforeBuildPatterns: [
        // kitöröl mindent az output mappából a build előtt
        // '**/*'
      // ]
    }),
    
    // minimize asset files
    // new TerserPlugin(),
    
    // move css into separate files
    // this makes the js bundle much smaller -> faster
    // allows to load files in parallel
    new MiniCssExtractPlugin({
      filename: '[name].[contenthash].css'
    })
  ]
};

module.exports = config;